============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Equation Solver-04-24-2023-03-36-22/ResiaKK
collected 20 items

test_grau_1.py FFFFFFF                                                   [ 35%]
test_grau_2.py FFF..F.F                                                  [ 75%]
test_grau_invalido.py FFFFF                                              [100%]

=================================== FAILURES ===================================
________________ test_grau_1_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df15e020>
test_input = []
expected_output = ['A equação é do primeiro grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "0"], ["A equação é do primeiro grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_1_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: str):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_1.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'b' is not defined

main.py:37: NameError
__________________ test_grau_1[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df1e3b50>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_1.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'c' is not defined

main.py:37: NameError
__________________ test_grau_1[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df15f4f0>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_1.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'c' is not defined

main.py:37: NameError
__________________ test_grau_1[test_input2-expected_output2] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df1a9e10>
test_input = [], expected_output = ['A equação é do primeiro grau', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_1.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'c' is not defined

main.py:37: NameError
__________________ test_grau_1[test_input3-expected_output3] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df15fca0>
test_input = [], expected_output = ['A equação é do primeiro grau', '5.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_1.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'c' is not defined

main.py:37: NameError
__________________ test_grau_1[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df1e2f20>
test_input = [], expected_output = ['A equação é do primeiro grau', '-2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_1.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'c' is not defined

main.py:37: NameError
__________________ test_grau_1[test_input5-expected_output5] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df15ebc0>
test_input = [], expected_output = ['A equação é do primeiro grau', '2.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["1", "1", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "2", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "10", "0"], ["A equação é do primeiro grau", "0.00"]),
            (["1", "1", "-5"], ["A equação é do primeiro grau", "5.00"]),
            (["1", "2", "4"], ["A equação é do primeiro grau", "-2.00"]),
            (["1", "2", "-4"], ["A equação é do primeiro grau", "2.00"]),
        ],
    )
    def test_grau_1(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_1.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'c' is not defined

main.py:37: NameError
________________ test_grau_2_a_0[test_input0-expected_output0] _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df2f1480>
test_input = []
expected_output = ['A equação é do segundo grau', 'Valor de a inválido']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "0"], ["A equação é do segundo grau", "Valor de a inválido"]),
        ],
    )
    def test_grau_2_a_0(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_2.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'b' is not defined

main.py:37: NameError
__________________ test_grau_2[test_input0-expected_output0] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df1a90f0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação possui uma raiz real' in 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00'
E            +  where 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00' = <built-in method strip of str object at 0x7f12df1dcc10>()
E            +    where <built-in method strip of str object at 0x7f12df1dcc10> = 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00\n'.strip
E            +      where 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f12df187b50>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f12df187b50> = <_io.StringIO object at 0x7f12df187b50>.getvalue

test_grau_2.py:64: AssertionError
__________________ test_grau_2[test_input1-expected_output1] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df2f14e0>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_2.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
    delta = b**2 - 4 * a *c
    raiz_linha = (-b + delta**0.5) / (2*a)
    raiz_linhas = (-b - delta**0.5) / (2*a)
    raiz_unica = (-b) / (2*a)
    if delta<0:
        print("A equação não possui raízes reais")
    
    elif delta==0:
        print("A equação possui apenas uma raiz real")
        print("{:.2f}".format(raiz_unica))
    
    elif delta>0:
        print("A equação possui duas raízes reais")
>   if raiz_linha < raiz_linhas:
E   TypeError: '<' not supported between instances of 'complex' and 'complex'

main.py:50: TypeError
__________________ test_grau_2[test_input4-expected_output4] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df2f0f70>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação não possui raízes reais']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_2.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
    delta = b**2 - 4 * a *c
    raiz_linha = (-b + delta**0.5) / (2*a)
    raiz_linhas = (-b - delta**0.5) / (2*a)
    raiz_unica = (-b) / (2*a)
    if delta<0:
        print("A equação não possui raízes reais")
    
    elif delta==0:
        print("A equação possui apenas uma raiz real")
        print("{:.2f}".format(raiz_unica))
    
    elif delta>0:
        print("A equação possui duas raízes reais")
>   if raiz_linha < raiz_linhas:
E   TypeError: '<' not supported between instances of 'complex' and 'complex'

main.py:50: TypeError
__________________ test_grau_2[test_input6-expected_output6] ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df1eb940>
test_input = []
expected_output = ['A equação é do segundo grau', 'A equação possui uma raiz real', 'A equação possui apenas uma raiz real', '0.00']

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            (["2", "1", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
            (["2", "1", "0", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "0", "-1"], ["A equação é do segundo grau",
                                     "A equação possui duas raízes reais", "-1.00", "1.00"]),
            (["2", "1", "1", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-1.00", "0.00"]),
            (["2", "1", "1", "1"], ["A equação é do segundo grau",
                                    "A equação não possui raízes reais"]),
            (["2", "1", "2", "0"], ["A equação é do segundo grau",
                                    "A equação possui duas raízes reais", "-2.00", "0.00"]),
            (["2", "2", "0", "0"], ["A equação é do segundo grau",
                                    "A equação possui uma raiz real", "A equação possui apenas uma raiz real", "0.00"]),
        ]
    )
    def test_grau_2(monkeypatch: MonkeyPatch, test_input: list[str], expected_output: list[str]):
        mocked_input = lambda prompt="": test_input.pop(0)
    
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        for output in expected_output:
>           assert output in mocked_stdout.getvalue().strip()
E           AssertionError: assert 'A equação possui uma raiz real' in 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00'
E            +  where 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00' = <built-in method strip of str object at 0x7f12df1dd070>()
E            +    where <built-in method strip of str object at 0x7f12df1dd070> = 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00\n'.strip
E            +      where 'A equação é do segundo grau\nA equação possui apenas uma raiz real\n0.00\n0.00, 0.00\n' = <built-in method getvalue of _io.StringIO object at 0x7f12df224670>()
E            +        where <built-in method getvalue of _io.StringIO object at 0x7f12df224670> = <_io.StringIO object at 0x7f12df224670>.getvalue

test_grau_2.py:64: AssertionError
___________________ test_grau_invalido[-1-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df20ab60>
test_input = '-1', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_invalido.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'b' is not defined

main.py:37: NameError
___________________ test_grau_invalido[-3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df1eb790>
test_input = '-3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_invalido.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'b' is not defined

main.py:37: NameError
____________________ test_grau_invalido[0-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df20ae60>
test_input = '0', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_invalido.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'b' is not defined

main.py:37: NameError
____________________ test_grau_invalido[3-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df15f370>
test_input = '3', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_invalido.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'b' is not defined

main.py:37: NameError
___________________ test_grau_invalido[10-Grau inv\xe1lido] ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f12df20afb0>
test_input = '10', expected_output = 'Grau inválido'

    @pytest.mark.parametrize(
        "test_input, expected_output",
        [
            ("-1", "Grau inválido"),
            ("-3", "Grau inválido"),
            ("0", "Grau inválido"),
            ("3", "Grau inválido"),
            ("10", "Grau inválido"),
        ],
    )
    def test_grau_invalido(monkeypatch: MonkeyPatch, test_input: str, expected_output: str):
        mocked_input = lambda prompt="": test_input
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
>           importlib.import_module(name="main", package="files")

test_grau_invalido.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1050: in _gcd_import
    ???
<frozen importlib._bootstrap>:1027: in _find_and_load
    ???
<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:688: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:883: in exec_module
    ???
<frozen importlib._bootstrap>:241: in _call_with_frames_removed
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    numero = int(input("Digite o numero que indica grau da equação:  "))
    
    
    if numero>2:
        print("Grau inválido")
    
    if numero<0:
        print("Grau inválido")
    
    if numero==1:
        print("A equação é do primeiro grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
           print("Valor de a inválido ")
    
    
        else:
           b = int(input("Insira o valor de b:  "))
    
           raiz_primeiro = -(b) / a
    
           print("{:.2f}".format(raiz_primeiro))
    
    if numero==2:
        print("A equação é do segundo grau")
    
        a = int(input("Digite o valor de a:  "))
        if a==0:
            print("Valor de a inválido")
    
        else:
            b = int(input("Digite o valor de b:  "))
            c = int(input("Digite o valor de c:  "))
            StopIteration
    
>   delta = b**2 - 4 * a *c
E   NameError: name 'b' is not defined

main.py:37: NameError
=========================== short test summary info ============================
FAILED test_grau_1.py::test_grau_1_a_0[test_input0-expected_output0] - NameEr...
FAILED test_grau_1.py::test_grau_1[test_input0-expected_output0] - NameError:...
FAILED test_grau_1.py::test_grau_1[test_input1-expected_output1] - NameError:...
FAILED test_grau_1.py::test_grau_1[test_input2-expected_output2] - NameError:...
FAILED test_grau_1.py::test_grau_1[test_input3-expected_output3] - NameError:...
FAILED test_grau_1.py::test_grau_1[test_input4-expected_output4] - NameError:...
FAILED test_grau_1.py::test_grau_1[test_input5-expected_output5] - NameError:...
FAILED test_grau_2.py::test_grau_2_a_0[test_input0-expected_output0] - NameEr...
FAILED test_grau_2.py::test_grau_2[test_input0-expected_output0] - AssertionE...
FAILED test_grau_2.py::test_grau_2[test_input1-expected_output1] - TypeError:...
FAILED test_grau_2.py::test_grau_2[test_input4-expected_output4] - TypeError:...
FAILED test_grau_2.py::test_grau_2[test_input6-expected_output6] - AssertionE...
FAILED test_grau_invalido.py::test_grau_invalido[-1-Grau inv\xe1lido] - NameE...
FAILED test_grau_invalido.py::test_grau_invalido[-3-Grau inv\xe1lido] - NameE...
FAILED test_grau_invalido.py::test_grau_invalido[0-Grau inv\xe1lido] - NameEr...
FAILED test_grau_invalido.py::test_grau_invalido[3-Grau inv\xe1lido] - NameEr...
FAILED test_grau_invalido.py::test_grau_invalido[10-Grau inv\xe1lido] - NameE...
========================= 17 failed, 3 passed in 0.17s =========================
